445. Add Two Numbers II
Solved
Medium
Topics
Companies
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]
Example 2:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [8,0,7]
Example 3:

Input: l1 = [0], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


SOLUTION ::

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        Stack<ListNode> st1=new Stack<>();
        Stack<ListNode> st2=new Stack<>();
          while (l1 != null) {
            st1.push(l1);
            l1 = l1.next;
        }

        while (l2 != null) {
            st2.push(l2);
            l2 = l2.next;
        }
        Stack<Integer> st3=new Stack<>();
        int carry=0;
        while(!st1.isEmpty() || !st2.isEmpty() || carry!=0){
            int val1 = (st1.isEmpty()) ? 0 : st1.pop().val;
            int val2 = (st2.isEmpty()) ? 0 : st2.pop().val;

            int tempSum = val1 + val2 + carry;

              if (tempSum < 10) {
                st3.push(tempSum);
                carry = 0;
            } else {
                st3.push(tempSum % 10);
                carry = tempSum / 10;
            }
        }
        while(!st1.isEmpty()){
            ListNode curr= st1.pop();
            int tempsum=curr.val+carry;
            if(tempsum<10){
                st3.push(tempsum);
            }
            else{
                st3.push((tempsum%10));
                carry=tempsum/10;
            }
        }

         while(!st2.isEmpty()){
            ListNode curr= st2.pop();
            int tempsum=curr.val+carry;
            if(tempsum<10){
                st3.push(tempsum);
            }
            else{
                st3.push((tempsum%10));
                carry=tempsum/10;
            }
        }
        if(carry!=0){
            st3.push(carry);
        }
        ListNode dummy=new ListNode(0);
            ListNode c=dummy;
        while(!st3.isEmpty()){
            c.next = new ListNode(st3.pop());
            c = c.next;
        }
        return dummy.next;

    }
}
