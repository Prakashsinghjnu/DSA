public class Circular_QUEUE {
    static class Cricular_queue{
        static int arr[];
        static int size;
        static int rear;
        static int front;
        Cricular_queue(int n){
            arr=new int[n];
            size=n;
            rear=-1;
            front=-1;
        }
        public static boolean isEmpty(){
            return rear==-1 && front==-1;
        }
        public static boolean isFull(){
            return rear+1%size==front;
        }
        public static void add(int data){
            if (isFull()){
                System.out.println("queue is full");
                return;
            }
            if (front==-1){
                front=0;
            }
            rear=(rear+1)%size;
            arr[rear]=data;
        }
        public static int remove(){
            int result=arr[front];
            if (isEmpty()){
                System.out.println("queue is empty");
                return -1;
            }
            if (rear==front){
                rear=front=-1;
            }
            else {
                front=front+1%size;

            }
            return result;
        }
        public static int peek(){
            if (isEmpty()){
                System.out.println("Queue is empty");
                return -1;
            }
            return arr[front];
        }


    }
    public static void main(String[] args) {
        Cricular_queue newqueue =new Cricular_queue(3);
        newqueue.add(1);
        newqueue.add(2);
        newqueue.add(3);
        while (!newqueue.isEmpty()){
            System.out.println(newqueue.peek());
            newqueue.remove();
        }
        System.out.println(newqueue.isEmpty());
    }
}
