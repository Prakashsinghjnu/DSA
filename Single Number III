260. Single Number III
Solved
Medium
Topics
Companies
Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.
Example 2:

Input: nums = [-1,0]
Output: [-1,0]
Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

2 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each integer in nums will appear twice, only two integers will appear once.



SOLUTION::

import java.util.HashSet;

class Solution {
    public int[] singleNumber(int[] nums) {
        // HashSet<Integer> set = new HashSet<>();
        // for (int num : nums) {
        //     if (set.contains(num)) {
        //         set.remove(num);
        //     } else {
        //         set.add(num);
        //     }
        // }
        // int[] result = new int[set.size()];
        // int i = 0;
        // for (int num : set) {
        //     result[i++] = num;
        // }
        // return result;

                HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        
        // Count the frequency of each number
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        // Collect the numbers that appear exactly once
        ArrayList<Integer> resultList = new ArrayList<>();
        for (int num : frequencyMap.keySet()) {
            if (frequencyMap.get(num) == 1) {
                resultList.add(num);
            }
        }
        
        // Convert the result list to an array
        int[] result = new int[resultList.size()];
        for (int i = 0; i < resultList.size(); i++) {
            result[i] = resultList.get(i);
        }
        
        return result;
    }
}

