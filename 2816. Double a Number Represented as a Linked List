2816. Double a Number Represented as a Linked List
You are given the head of a non-empty linked list representing a non-negative integer without leading zeroes.

Return the head of the linked list after doubling it.

 

Example 1:


Input: head = [1,8,9]
Output: [3,7,8]
Explanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.
Example 2:


Input: head = [9,9,9]
Output: [1,9,9,8]
Explanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. 
 

Constraints:

The number of nodes in the list is in the range [1, 104]
0 <= Node.val <= 9
The input is generated such that the list represents a number that does not have leading zeros, except the number 0 itself.\

SOLUTION ::

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode doubleIt(ListNode head) {
    //     ListNode curr=head;
    //     int digit=0;
    //     int size=0;
    //     while(curr!=null){
    //         size++;
    //         digit=digit*10+curr.val;
    //         curr=curr.next;
    //     }
       
    //     int dnum=digit*2;
        
    //     ListNode dummy=new ListNode(0);
    //     ListNode newcurr=dummy;
    //      if(size==1 && digit<5){
    //          ListNode c=new ListNode(dnum);
    //         return c;
    //     }
    //     while (dnum > 0) {
    //         int num = dnum % 10;
    //         newcurr.next=new ListNode(num);
    //         newcurr=newcurr.next;
    //         dnum=dnum/10;
    //     }
        
    //    ListNode reversed=reverse(dummy.next);
    //    return reversed;
    // }
    // private static ListNode reverse(ListNode head){
    //     ListNode prev=null;
    //     ListNode curr=head;
    //     ListNode next;
    //     while(curr!=null){
    //         next=curr.next;
    //         curr.next=prev;
    //         prev=curr;
    //         curr=next;
    //     }
    //    return prev;


        // int carry =0;
        // ListNode curr=head;
        // while(curr!=null){
        //     int sum=curr.val*2+carry;
        //     curr.val=sum%10;
        //     carry=sum/10;
        //     if(curr.next==null && carry>0){
        //         ListNode nxt=new ListNode(carry);
        //         carry=0;
        //     }
        //     curr=curr.next;
        // }
        
        
        
        if(carry(head)==1){
            return new ListNode(1,head);
            
        }
        return head;
    }
    private int carry(ListNode node){
        int val=node.val*2;
        if(node.next!=null)
            val += carry(node.next);
            node.val=val%10;
            return val/10;
    }
    
}
