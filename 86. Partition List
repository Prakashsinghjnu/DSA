86. Partition List

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

SOLUTION :

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode curr=head;
        int size=0;
        ArrayList<Integer> num1=new ArrayList<>();
        ArrayList<Integer> num2=new ArrayList<>();
        while(curr!=null){
            if(curr.val<x){
                num1.add(curr.val);
            }
            else{
                num2.add(curr.val);
            }
            size++;
            curr=curr.next;
        }
        //  LinkedList<Integer> combinedList = new LinkedList<>();
        // combinedList.addAll(num1);
        // combinedList.addAll(num2);
        // return createListNode(combinedList);
            int[] arr = new int[size];
        for (int i = 0; i < num1.size(); i++) {
            arr[i] = num1.get(i);
        }

        int k = num1.size();
        for (int i = k; i < size; i++) {
            arr[i] = num2.get(i-k);
        }

        curr = head;
        int j = 0;
        while (curr != null) {
            curr.val = arr[j];
            j++;
            curr = curr.next;
        }

        return head;
    }
    //     private ListNode createListNode(LinkedList<Integer> list) {
    //     if (list.isEmpty()) {
    //         return null;
    //     }

    //     ListNode head = new ListNode(list.removeFirst());
    //     ListNode current = head;

    //     while (!list.isEmpty()) {
    //         current.next = new ListNode(list.removeFirst());
    //         current = current.next;
    //     }

    //     return head;
    // }
}
